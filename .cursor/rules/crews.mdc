---
description: Developing Single Crews as part of a CrewAI flow
globs: "**/crews/**/*.py,**/crew*.py,**/*crew*.py,**/agent*.py"
alwaysApply: false
---

# CrewAI Crew Implementation Guidelines

## Crew Structure
- Define crews in dedicated modules under the `crews/` directory
- Use a class-based approach for crew definition with `@CrewBase` decorator
- Include methods for creating agents, tasks, and the crew itself
- Support both synchronous and asynchronous execution
- Use YAML configuration files for agent and task definitions

## Agent Definition
- Define agents with clear roles, goals, and backstories
- Use the `@agent` decorator for agent creation methods
- Configure the LLM for each agent based on its requirements
- Add tools to agents when needed for specific capabilities
- Load agent configurations from YAML files when possible

## Task Definition
- Define tasks with clear names and descriptions
- Use the `@task` decorator for task creation methods
- Specify the expected output format using Pydantic models
- Assign tasks to appropriate agents based on their roles
- Set up task dependencies when needed

## Example Crew Implementation
```python
import os
import yaml
import logging
from typing import List, Dict, Any
from pydantic import BaseModel, Field

from crewai import Agent, Crew, Process, Task
from crewai.project import CrewBase, agent, crew, task, output_pydantic
from langchain_openai import ChatOpenAI

# Define Pydantic models for task outputs
class DataAnalysisOutput(BaseModel):
    """Output model for the data analysis task."""
    patterns: List[str] = Field(..., description="List of identified patterns in the data")
    trends: List[str] = Field(..., description="List of identified trends in the data")
    analysis: str = Field(..., description="Detailed analysis of the data")

class BusinessInsightsOutput(BaseModel):
    """Output model for the business insights task."""
    summary: str = Field(..., description="Summary of the data analysis")
    insights: List[str] = Field(..., description="Key insights from the analysis")
    recommendations: List[str] = Field(..., description="Recommendations based on the analysis")

@CrewBase
class AnalysisCrew:
    """Data Analysis Crew for analyzing data and providing insights."""
    
    # Paths to YAML configuration files
    agents_config_path = 'config/agents.yaml'
    tasks_config_path = 'config/tasks.yaml'
    
    def __init__(self):
        """Initialize the crew with necessary configuration."""
        super().__init__()
        
        # Initialize the LLM
        api_key = os.environ.get("OPENAI_API_KEY")
        if not api_key:
            raise ValueError("OPENAI_API_KEY environment variable is not set")
            
        # Use the OpenAI LLM
        self.llm = ChatOpenAI(
            model="gpt-3.5-turbo",
            temperature=0.2,
            api_key=api_key
        )
        
        # Load configurations
        self.agents_config = self._load_config(self.agents_config_path)
        self.tasks_config = self._load_config(self.tasks_config_path)
    
    @output_pydantic
    def data_analysis_output(self) -> DataAnalysisOutput:
        """Register the DataAnalysisOutput model with CrewBase."""
        return DataAnalysisOutput
    
    @output_pydantic
    def business_insights_output(self) -> BusinessInsightsOutput:
        """Register the BusinessInsightsOutput model with CrewBase."""
        return BusinessInsightsOutput
    
    @agent
    def data_analyst(self) -> Agent:
        """Create the data analyst agent."""
        config = self.agents_config.get('data_analyst', {
            "name": "Data Analyst",
            "role": "Senior Data Analyst",
            "goal": "Analyze data and extract meaningful patterns",
            "backstory": "You are an experienced data analyst with expertise in finding patterns in complex datasets"
        })
        
        return Agent(
            config=config,
            llm=self.llm,
            verbose=True
        )
    
    @agent
    def insights_specialist(self) -> Agent:
        """Create the insights specialist agent."""
        config = self.agents_config.get('insights_specialist', {
            "name": "Insights Specialist",
            "role": "Business Insights Specialist",
            "goal": "Convert data analysis into actionable business insights",
            "backstory": "You specialize in translating data findings into business insights"
        })
        
        return Agent(
            config=config,
            llm=self.llm,
            verbose=True
        )
    
    @task
    def analyze_data_task(self) -> Task:
        """Create the data analysis task."""
        task_config = self.tasks_config.get('analyze_data', {
            "name": "Analyze Data",
            "description": "Analyze the dataset and identify key patterns and trends."
        })
        
        return Task(
            config=task_config,
            agent=self.data_analyst(),
            output_pydantic=DataAnalysisOutput
        )
    
    @task
    def generate_insights_task(self) -> Task:
        """Create the insights generation task."""
        task_config = self.tasks_config.get('generate_insights', {
            "name": "Generate Insights and Recommendations",
            "description": "Based on the data analysis, generate business insights and recommendations."
        })
        
        return Task(
            config=task_config,
            agent=self.insights_specialist(),
            context=[self.analyze_data_task()],
            output_pydantic=BusinessInsightsOutput
        )
    
    @crew
    def crew(self) -> Crew:
        """Create and return the crew."""
        return Crew(
            agents=self.agents,
            tasks=self.tasks,
            process=Process.sequential,
            verbose=True
        )
```
